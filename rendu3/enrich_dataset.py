import yaml
import random
from faker import Faker

fake = Faker('fr_FR')

# Synonymes et templates par intention (avec Faker)
enrich_templates = {
    "salutation": [
        "bonjour", "salut", "hello", "coucou", "bien le bonjour", "hey", "yo", "salutations",
        "bonsoir", "salut √† tous", "bonjour tout le monde", "salut les amis", "bienvenue", "bonne journ√©e", "bonne soir√©e",
        "salut √† vous", "bonjour √† tous", "salut tout le monde", "bonjour la compagnie", "salut la team", "bonjour √† vous tous", "salut les copains", "bonjour √† toutes et √† tous", "salut la famille", "bonjour √† la team", "salut √† toi", "bonjour cher ami", "salut cher ami", "bonjour √† tous et √† toutes", "salut √† toutes et √† tous", "bonjour √† toutes", "salut √† toutes",
        f"Bonjour {fake.first_name()}", f"Salut √† {fake.city()}", f"Coucou {fake.first_name()} et {fake.first_name()} !", f"Hey la team {fake.city()} !"
    ],
    "menu": [
        "je veux voir le menu", "affichez la carte", "montrez-moi le menu", "quels sont vos plats", "que proposez-vous", "qu'est-ce qu'il y a √† manger", "vos plats", "carte",
        "pouvez-vous me montrer la carte ?", "je voudrais consulter le menu", "qu'avez-vous √† proposer ?", "quels sont les menus disponibles ?", "je souhaite voir la carte", "montrez-moi vos sp√©cialit√©s", "quels plats recommandez-vous ?",
        "je peux avoir la carte ?", "je veux voir ce que vous servez", "je souhaite voir vos plats", "montrez-moi la carte s'il vous pla√Æt", "je veux consulter la carte", "je veux voir la liste des plats", "pouvez-vous afficher le menu ?", "je veux conna√Ætre vos menus", "je veux voir la carte du jour", "quels sont les plats du jour ?", "je veux voir la carte compl√®te", "je veux voir la carte des boissons", "je veux voir la carte des desserts", "je veux voir la carte sp√©ciale", "je veux voir la carte enfant",
        f"{fake.first_name()} veut voir le menu", f"Quels plats √† {fake.city()} ?", f"Menu sp√©cial pour {fake.date(pattern='%d/%m/%Y')} ?"
    ],
    "commande": [
        "je veux commander une pizza", "je commande une pizza", "j'aimerais commander", "je voudrais commander", "puis-je passer une commande", "je passe commande", "commande pour deux personnes", "je souhaite commander un menu",
        "je voudrais commander √† emporter", "je veux passer commande", "je souhaite r√©server une commande", "je commande pour ce soir", "je veux commander une boisson", "je passe une commande group√©e", "je veux commander un dessert",
        "je veux commander une salade", "je veux commander une entr√©e", "je veux commander un plat principal", "je veux commander un menu enfant", "je veux commander une pizza √† emporter", "je veux commander pour ce midi", "je veux commander pour ce soir", "je veux commander pour demain", "je veux commander pour une f√™te", "je veux commander pour un anniversaire", "je veux commander pour un √©v√©nement", "je veux commander pour une r√©union", "je veux commander pour une soir√©e", "je veux commander pour un d√©jeuner", "je veux commander pour un d√Æner",
        f"{fake.first_name()} commande {random.randint(1, 5)} pizza(s)", f"Commande de {random.randint(1, 5)} pizza(s) √† {fake.time(pattern='%H:%M')}"
    ],
    "horaires": [
        "quels sont vos horaires", "√† quelle heure ouvrez-vous", "quand fermez-vous", "heures d'ouverture", "c'est ouvert le dimanche", "vos horaires", "√† quelle heure fermez-vous le soir",
        "√™tes-vous ouverts aujourd'hui ?", "vos horaires d'ouverture le week-end ?", "√† quelle heure fermez-vous le samedi ?", "quand puis-je venir ?", "√™tes-vous ouverts ce soir ?", "vos heures d'ouverture ?", "√† quelle heure commencez-vous √† servir ?",
        "quels sont vos horaires d'ouverture ?", "quels sont vos horaires de fermeture ?", "√† quelle heure puis-je venir ?", "√† quelle heure puis-je commander ?", "√† quelle heure commence le service ?", "√† quelle heure se termine le service ?", "√™tes-vous ouverts en semaine ?", "√™tes-vous ouverts le soir ?", "√™tes-vous ouverts le midi ?", "√™tes-vous ouverts les jours f√©ri√©s ?", "√™tes-vous ouverts pendant les vacances ?", "vos horaires pendant les vacances ?", "vos horaires sp√©ciaux ?", "vos horaires exceptionnels ?", "vos horaires pour les f√™tes ?",
        f"√Ä quelle heure ouvrez-vous le {fake.date(pattern='%d/%m/%Y')} ?", f"√ätes-vous ouverts √† {fake.time(pattern='%H:%M')} ?"
    ],
    "prix": [
        "combien co√ªte une pizza", "quel est le prix", "c'est combien", "prix d'une pizza", "tarif", "combien √ßa co√ªte", "co√ªt",
        "quel est le tarif d'un menu ?", "combien pour une boisson ?", "c'est combien la livraison ?", "quel est le prix d'un dessert ?", "combien dois-je payer ?", "quel est le prix total ?", "combien pour deux menus ?",
        "combien co√ªte un menu enfant ?", "combien co√ªte un menu complet ?", "combien co√ªte une entr√©e ?", "combien co√ªte un plat principal ?", "combien co√ªte un dessert ?", "combien co√ªte une boisson ?", "combien co√ªte une pizza sp√©ciale ?", "combien co√ªte une pizza margherita ?", "combien co√ªte une pizza 4 fromages ?", "combien co√ªte une pizza royale ?", "combien co√ªte une pizza v√©g√©tarienne ?", "combien co√ªte une pizza napolitaine ?", "combien co√ªte une pizza calzone ?", "combien co√ªte une pizza pepperoni ?", "combien co√ªte une pizza hawa√Øenne ?",
        f"Quel est le prix d'une pizza {random.choice(['margherita', 'royale', 'calzone', 'pepperoni'])} ?", f"Combien pour {random.randint(1, 5)} pizzas ?"
    ],
    "au_revoir": [
        "au revoir", "bye", "merci", "bonne journ√©e", "√† bient√¥t", "√† la prochaine", "bonne soir√©e",
        "merci beaucoup", "bonne continuation", "√† plus tard", "√† la prochaine fois", "bonne fin de journ√©e", "merci et au revoir", "√† plus",
        "bonne nuit", "√† tout √† l'heure", "√† une prochaine fois", "merci pour tout", "merci et bonne journ√©e", "merci et bonne soir√©e", "merci et √† bient√¥t", "merci et √† la prochaine", "merci et bonne continuation", "merci et √† plus tard", "merci et √† plus", "merci et bonne fin de journ√©e", "merci et √† une prochaine fois", "merci et √† tout √† l'heure", "merci et bonne nuit",
        f"Merci {fake.first_name()} !", f"Bonne journ√©e √† {fake.city()} !"
    ]
}

def faker_phrase(intent):
    """G√©n√®re une phrase r√©aliste avec Faker selon l'intention."""
    plats = [
        "pizza margherita", "pizza 4 fromages", "pizza royale", "pizza v√©g√©tarienne", "pizza napolitaine", "pizza calzone", "pizza pepperoni", "pizza hawa√Øenne", "salade C√©sar", "tarte aux pommes", "tiramisu", "coca-cola", "jus d'orange", "eau min√©rale", "menu enfant", "menu complet", "entr√©e du jour", "plat du jour", "dessert du jour"
    ]
    if intent == "salutation":
        return random.choice([
            f"Bonjour {fake.first_name()}",
            f"Salut √† {fake.city()}",
            f"Coucou {fake.first_name()} et {fake.first_name()} !",
            f"Hey la team {fake.city()} !"
        ])
    if intent == "menu":
        return random.choice([
            f"{fake.first_name()} veut voir le menu",
            f"Quels plats √† {fake.city()} ?",
            f"Menu sp√©cial pour {fake.date(pattern='%d/%m/%Y')} ?"
        ])
    if intent == "commande":
        return random.choice([
            f"{fake.first_name()} commande {random.randint(1, 5)} {random.choice(plats)}",
            f"Commande de {random.randint(1, 5)} {random.choice(plats)} √† {fake.time(pattern='%H:%M')}"
        ])
    if intent == "horaires":
        return random.choice([
            f"√Ä quelle heure ouvrez-vous le {fake.date(pattern='%d/%m/%Y')} ?",
            f"√ätes-vous ouverts √† {fake.time(pattern='%H:%M')} ?"
        ])
    if intent == "prix":
        return random.choice([
            f"Quel est le prix d'une {random.choice(plats)} ?",
            f"Combien pour {random.randint(1, 5)} {random.choice(plats)} ?"
        ])
    if intent == "au_revoir":
        return random.choice([
            f"Merci {fake.first_name()} !",
            f"Bonne journ√©e √† {fake.city()} !"
        ])
    return ""

def enrich_dataset(yaml_path, n_variants=12, max_attempts_per_intent=1000):
    print(f"\nüì• Lecture du dataset depuis {yaml_path} ...")
    with open(yaml_path, "r", encoding="utf-8") as f:
        data = yaml.safe_load(f)

    print(f"\nüöÄ D√©but de l'enrichissement pour chaque intention...")
    for intent, variants in enrich_templates.items():
        print(f"\n‚û°Ô∏è  Intention : '{intent}'")
        if "intentions" not in data:
            data["intentions"] = {}
        if intent not in data["intentions"]:
            data["intentions"][intent] = []
        current = set(data["intentions"][intent])
        print(f"   - Exemples existants : {len(current)}")
        attempts = 0
        while len(current) < n_variants and attempts < max_attempts_per_intent:
            if random.random() < 0.25:
                phrase = faker_phrase(intent)
                print(f"   [Faker] {phrase}")
            else:
                phrase = random.choice(variants)
                print(f"   [Template] {phrase}")
            if intent == "commande":
                phrase = random.choice([
                    phrase,
                    f"{phrase} s'il vous pla√Æt",
                    f"{phrase} pour emporter",
                    f"{phrase} pour ce soir"
                ])
            elif intent == "salutation":
                phrase = random.choice([
                    phrase,
                    f"{phrase} √† tous",
                    f"{phrase} tout le monde"
                ])
            elif intent == "menu":
                phrase = random.choice([
                    phrase,
                    f"{phrase} s'il vous pla√Æt"
                ])
            if phrase not in current:
                print(f"   + Ajout√© : {phrase}")
            current.add(phrase)
            attempts += 1
        print(f"   ‚Üí Total g√©n√©r√© pour '{intent}' : {len(current)} exemples")
        if len(current) < n_variants:
            print(f"‚ö†Ô∏è  Impossible de g√©n√©rer {n_variants} variantes uniques pour l'intention '{intent}'. Uniquement {len(current)} g√©n√©r√©es.")
        data["intentions"][intent] = list(current)

    print("\nüíæ Enrichissement termin√©, sauvegarde du dataset...")
    with open(yaml_path, "w", encoding="utf-8") as f:
        yaml.dump(data, f, allow_unicode=True, sort_keys=False)
    print("‚úÖ Dataset enrichi et sauvegard√© !")

if __name__ == "__main__":
    variants = random.randrange(10, 30)
    print(f"\n==============================")
    print(f"Enrichissement du dataset avec {variants} variantes par intention...")
    print(f"==============================\n")
    enrich_dataset("dataset.yaml", n_variants=variants)