"""
rendu3
======

Script principal pour l'orchestration du pipeline de classification d'intentions chatbot.

Ce script charge le dataset YAML, initialise les modules de pr√©traitement, classification, NLP et √©valuation, et ex√©cute les tests principaux.

D√©pendances :
- yaml
- intent_classifier
- TextPreprocessor
- nlp_processor
- IntentClassifierEvaluator

Exemple d'utilisation :
    $ python rendu3.py
"""

from TextPreprocessor import TextPreprocessor
from nlp_processor import NLPProcessor
from intent_classifier import IntentClassifier
from IntentClassifierEvaluator import IntentClassifierEvaluator
import yaml

def readFile():
    with open('dataset.yaml', 'r', encoding='utf-8') as file:
        try:
            data = yaml.safe_load(file)
            print("üìÇ Contenu du fichier YAML:")
            print(yaml.dump(data, default_flow_style=False, allow_unicode=True))
            return data
        except yaml.YAMLError as e:
            print(f"Erreur lors de la lecture du fichier YAML: {e}")
            return None

def classify_intent_with_preprocessing(message, preprocessor, classifier):
    """
    Applique le pr√©processing puis la classification d'intention.
    Args:
        message (str): Le message utilisateur √† analyser.
        preprocessor (TextPreprocessor): Instance du pr√©processeur.
        classifier (IntentClassifier): Instance du classificateur.
    Returns:
        tuple: (intention pr√©dite, probabilit√©s)
    """
    processed_message = preprocessor.normalize_text(message)
    intent = classifier.predict(processed_message)
    confidence = classifier.predict_proba(processed_message)
    return intent, confidence

# Tests et exemples d'utilisation
if __name__ == "__main__":
    # Charger et afficher le dataset
    dataset = readFile()
    print("‚úÖ Fichier YAML lu avec succ√®s!")
    
    print("\nü§ñ Classe IntentClassifier - Module de Classification d'Intentions")
    print("=" * 60)
    classifier = IntentClassifier()
    
    print("üì¶ Pr√©paration des donn√©es d'entra√Ænement...")
    # for intent_data in dataset:
    #     intent = intent_data['intent']
    #     examples = intent_data['examples']
    #     classifier.train(intent, examples)
    
    # Pr√©parer les donn√©es d'entra√Ænement √† partir du dataset YAML
    texts = []
    labels = []
    if dataset and 'intentions' in dataset:
        for intention, examples in dataset['intentions'].items():
            for example in examples:
                texts.append(example)
                labels.append(intention)

    if len(texts) > 0:
        # Utilisation de la classe d'√©valuation
        evaluator = IntentClassifierEvaluator(classifier, texts, labels)
        evaluator.evaluate()
        evaluator.test_obligatoires()
    else:
        print("‚ùå Aucune donn√©e d'entra√Ænement trouv√©e dans le dataset!")